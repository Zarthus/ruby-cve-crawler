module CVE
  class Vulnerability
    def initialize(data)
      unless data.instance_of?(Hash)
        raise 'CVE Vulnerability needs to be initialized with a hash'
      end

      if malformed?(data)
        raise 'CVE Vulnerability data is malformed'
      end

      @identifier = data[:identifier]
      @date = DateTime.parse(data[:date])
      @description = data[:description]
      @link = data[:link]
      @title = data[:title]
    end

    attr_reader :identifier, :date, :description, :link, :title

    def malformed?(data)
      !(data.has_key?(:identifier) && data.has_key?(:date) && data.has_key?(:description) &&
          data.has_key?(:link) && data.has_key?(:title))
    end

    def equal?(cve_item, strict=false)
      return false unless cve_item.is_a?(Vulnerability)

      if strict

        return @identifier == cve_item.identifier && @link == cve_item.link && @date.iso8601 == cve_item.date.iso8601 &&
            @title == cve_item.title && @description == cve_item.description
      end

      @identifier == cve_item.identifier && @link == cve_item.link
    end

    def to_s
      "#{@identifier} - #{@title} - #{@link}"
    end

    def inspect
      "#<CVE id=#{@identifier}>"
    end
  end
end
