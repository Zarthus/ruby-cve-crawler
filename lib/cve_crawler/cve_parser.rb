require 'rss'
require 'cve_crawler/cve_filter'
require 'cve_crawler/cve_vulnerability'

module CVE
  class Parser
    def initialize(filters=nil)
      @filters = []

      @filters << CVE::Filter.new

      if filters.is_a?(Array)
        filters.each do |filter|
          @filters << filter
        end
      elsif filters
          @filters << filters
      end
    end

    def parse(content)
      results = parse_rss_feed(content)

      filter(results)
    end

    def parse_rss_feed(content)
      rss = RSS::Parser.parse(content)

      parse_items(rss)
    end

    def parse_items(rss)
      items = []

      if rss.nil?
        raise 'RSS object failed to parse, is it valid XML?'
      end

      rss.items.each do |item|
        items << parse_item(item)
      end

      items
    end

    def parse_item(item)
      CVE::Vulnerability.new({
        :identifier => extract_cve_identifier(item.title),
        :title => item.title,
        :link => item.link,
        :description => item.description,
        :date => item.date
      })
    end

    def extract_cve_identifier(title)
      title.split(' ')[0]
    end

    def filter(results)
      filtered_contents = []

      results.each do |result|
        result_ok = true

        @filters.each do |filter|
          result_ok = result_ok && !filter.filter(result)
        end

        filtered_contents << result if result_ok
      end

      filtered_contents
    end

    def inspect
      "<CVE::Parser filters=#{@filters.inspect}>"
    end
  end
end
