require_relative 'spec_helper'

# Not exactly what it says on the tin: Everything here is faked to simulate an environment
# where you can dynamically crawl, parse, filter and generate new vulnerabilities like the
# real RSS feed would.  This simply simulates that behaviour to verify the system as a whole
# still functions.  These tests failing might not necessarily represent a failure in the core
# but are more likely to represent a failure in one of the components.
describe CVE::Core do
  core = CoreMock.new

  it 'should fetch new results without error' do
    expect{ core.fetch }.not_to raise_error
  end

  it 'should list new vulnerabilities when CVE::Core#fetch is called and new vulnerabilities exist' do
    result = core.fetch

    expect(result.count).not_to eq(0)
  end

  it 'should return a list of CVE::Vulnerability when vulnerabilities have been found' do
    result = core.fetch

    result.each do |res|
      expect(res).to be_a(CVE::Vulnerability)
    end
  end

  it 'should not list old vulnerabilities when CVE::Core#fetch is called' do
    tmp_core = create_core_object

    old_cves = tmp_core.fetch
    new_cves = tmp_core.fetch

    new_cves.each do |new|
      old_cves.each do |old|
        expect(new.identifier).not_to eq(old.identifier)
        expect(new.equal?(old)).to eq(false)
      end
    end
  end

  it 'should append as many items to the history as were fetched' do
    tmp_core = create_core_object

    result = tmp_core.fetch

    expect(tmp_core.parser.filters[0].history.count).to eq(result.count)
  end

  it 'should append new items to the history of the filter' do
    tmp_core = create_core_object

    tmp_core.fetch
    current_history_size = tmp_core.parser.filters[0].history.count
    result = tmp_core.fetch

    expect(tmp_core.parser.filters[0].history.count).not_to eq(current_history_size)
    expect(tmp_core.parser.filters[0].history.count).to eq(current_history_size + result.count)
  end
end
